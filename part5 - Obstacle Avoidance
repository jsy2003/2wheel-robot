1. ~/simulation_ws/src/my_worlds/worlds/world2.launch
      <?xml version="1.0" encoding="UTF-8"?>

      <launch>
        <arg name="robot" default="machines"/>
        <arg name="debug" default="false"/>
        <arg name="gui" default="true"/>
        <arg name="headless" default="false"/>
        <arg name="pause" default="false"/>
        <arg name="world" default="world02" />
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
          <arg name="world_name" value="$(find my_worlds)/worlds/world01.world"/>
          <arg name="debug" value="$(arg debug)" />
          <arg name="gui" value="$(arg gui)" />
          <arg name="paused" value="$(arg pause)"/>
          <arg name="use_sim_time" value="true"/>
          <arg name="headless" value="$(arg headless)"/>
          <env name="GAZEBO_MODEL_PATH" value="$(find simulation_gazebo)/models:$(optenv GAZEBO_MODEL_PATH)"/>
        </include>
      </launch>
      
2. roslaunch m2wr_description spawn.launch y:=8

3. ~/catkin_ws/src/motion_plan/scripts/obstacle_avoidance.py ==> chmod +x <name_of_the_file.py>] !!
      #! /usr/bin/env python
      import rospy

      from sensor_msgs.msg import LaserScan
      from geometry_msgs.msg import Twist
   
       pub = none
      def main():
          global pub

          rospy.init_node('reading_laser')

          pub = rospy.Publisher('/cmd_vel', Twist, queue_size=1)

          sub = rospy.Subscriber('/m2wr/laser/scan', LaserScan, clbk_laser)

          rospy.spin()

      if __name__ == '__main__':
          main()
          
 4.  Now, between the libraries and the main method, we define the method that receives the laser readings through the subscriber. 
     The 5 regions are defined in a dictionary of Python.
    
    def clbk_laser(msg):
        regions = {
            'right':  min(min(msg.ranges[0:143]), 10),
            'fright': min(min(msg.ranges[144:287]), 10),
            'front':  min(min(msg.ranges[288:431]), 10),
            'fleft':  min(min(msg.ranges[432:575]), 10),
            'left':   min(min(msg.ranges[576:713]), 10),
        }

        take_action(regions)
        
    def take_action(regions):
        msg = Twist()
        linear_x = 0
        angular_z = 0

        state_description = ''

        if regions['front'] > 1 and regions['fleft'] > 1 and regions['fright'] > 1:
            state_description = 'case 1 - nothing'
            linear_x = 0.6
            angular_z = 0
        elif regions['front'] < 1 and regions['fleft'] > 1 and regions['fright'] > 1:
            state_description = 'case 2 - front'
            linear_x = 0
            angular_z = -0.3
        elif regions['front'] > 1 and regions['fleft'] > 1 and regions['fright'] < 1:
            state_description = 'case 3 - fright'
            linear_x = 0
            angular_z = -0.3
        elif regions['front'] > 1 and regions['fleft'] < 1 and regions['fright'] > 1:
            state_description = 'case 4 - fleft'
            linear_x = 0
            angular_z = 0.3
        elif regions['front'] < 1 and regions['fleft'] > 1 and regions['fright'] < 1:
            state_description = 'case 5 - front and fright'
            linear_x = 0
            angular_z = -0.3
        elif regions['front'] < 1 and regions['fleft'] < 1 and regions['fright'] > 1:
            state_description = 'case 6 - front and fleft'
            linear_x = 0
            angular_z = 0.3
        elif regions['front'] < 1 and regions['fleft'] < 1 and regions['fright'] < 1:
            state_description = 'case 7 - front and fleft and fright'
            linear_x = 0
            angular_z = -0.3
        elif regions['front'] > 1 and regions['fleft'] < 1 and regions['fright'] < 1:
            state_description = 'case 8 - fleft and fright'
            linear_x = 0
            angular_z = -0.3
        else:
            state_description = 'unknown case'
            rospy.loginfo(regions)

        rospy.loginfo(state_description)
        msg.linear.x = linear_x
        msg.angular.z = angular_z
        pub.publish(msg)
        
